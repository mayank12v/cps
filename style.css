<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CPS Test - By Mayank Gaur</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Custom styles for CPS Test */
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap');

        * {
            font-family: 'Inter', sans-serif;
        }

        /* Custom animations */
        @keyframes pulse {
            0%, 100% {
                opacity: 1;
            }
            50% {
                opacity: 0.5;
            }
        }

        .animate-pulse {
            animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
        }

        /* Button hover effects */
        .time-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        }

        .time-btn.active {
            border-color: #10b981 !important;
            background-color: rgba(16, 185, 129, 0.2) !important;
            color: #6ee7b7 !important;
        }

        /* Performance rating colors */
        .rating-legendary {
            background-color: rgba(147, 51, 234, 0.3);
            color: #c084fc;
        }

        .rating-excellent {
            background-color: rgba(16, 185, 129, 0.3);
            color: #6ee7b7;
        }

        .rating-very-good {
            background-color: rgba(59, 130, 246, 0.3);
            color: #93c5fd;
        }

        .rating-good {
            background-color: rgba(245, 158, 11, 0.3);
            color: #fbbf24;
        }

        .rating-average {
            background-color: rgba(249, 115, 22, 0.3);
            color: #fb923c;
        }

        .rating-below-average {
            background-color: rgba(239, 68, 68, 0.3);
            color: #fca5a5;
        }

        /* Responsive design */
        @media (max-width: 768px) {
            .text-6xl {
                font-size: 3rem;
            }

            .text-2xl {
                font-size: 1.5rem;
            }

            #clickButton {
                width: 320px;
                height: 160px;
                font-size: 1.125rem;
            }

            .max-w-4xl {
                max-width: 100%;
                padding: 0 1rem;
            }
        }

        @media (max-width: 480px) {
            .text-6xl {
                font-size: 2.5rem;
            }

            .text-2xl {
                font-size: 1.25rem;
            }

            #clickButton {
                width: 700px;
                height: 250px;
                font-size: 1rem;
            }

            .grid-cols-3 {
                grid-template-columns: repeat(2, minmax(0, 1fr));
            }
        }

        /* Fixed position for the click button */
        #clickButtonContainer {
            position: relative; /* Establish positioning context */
            height: 200px; /* Adjust height as needed to accommodate the button */
        }

        #clickButton {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 400px; /* Adjust width as needed */
            height: 150px; /* Adjust height as needed */
            font-size: 2rem; /* Adjust font size as needed */
        }
    </style>
</head>
<body class="min-h-screen bg-gradient-to-br from-green-900 via-gray-900 to-black text-white">
    <!-- Header -->
    <div class="text-center pt-8 pb-6">
        <h1 class="text-6xl font-bold text-gray-200 mb-2">CPS TEST</h1>
        <p class="text-2xl font-semibold italic bg-gradient-to-r from-purple-500 via-purple-400 to-purple-600 bg-clip-text text-transparent drop-shadow-lg">
            By Mayank Gaur
        </p>
    </div>

    <div class="max-w-4xl mx-auto px-4 pb-20">
        <!-- Time Selection -->
        <div class="bg-black/40 backdrop-blur-sm rounded-lg border border-green-800/30 p-6 mb-6">
            <h2 class="text-xl font-semibold text-gray-200 mb-4 flex items-center">
                <svg class="w-5 h-5 mr-2 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <circle cx="12" cy="12" r="10"></circle>
                    <polyline points="12,6 12,12 16,14"></polyline>
                </svg>
                Select Test Duration
            </h2>
            <div class="grid grid-cols-3 md:grid-cols-6 gap-3" id="timeOptions">
                <button class="time-btn p-3 rounded-lg border-2 transition-all border-green-500 bg-green-500/20 text-green-300" data-time="10">10s</button>
                <button class="time-btn p-3 rounded-lg border-2 transition-all border-gray-600 hover:border-gray-500 text-gray-300 hover:bg-gray-800/50" data-time="1">1s</button>
                <button class="time-btn p-3 rounded-lg border-2 transition-all border-gray-600 hover:border-gray-500 text-gray-300 hover:bg-gray-800/50" data-time="5">5s</button>
                <button class="time-btn p-3 rounded-lg border-2 transition-all border-gray-600 hover:border-gray-500 text-gray-300 hover:bg-gray-800/50" data-time="15">15s</button>
                <button class="time-btn p-3 rounded-lg border-2 transition-all border-gray-600 hover:border-gray-500 text-gray-300 hover:bg-gray-800/50" data-time="30">30s</button>
                <button class="time-btn p-3 rounded-lg border-2 transition-all border-gray-600 hover:border-gray-500 text-gray-300 hover:bg-gray-800/50" data-time="60">60s</button>
            </div>
        </div>

        <!-- Stats Cards -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
            <div class="bg-black/40 backdrop-blur-sm rounded-lg border border-green-800/30 p-6">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm text-gray-400">Time Left</p>
                        <p class="text-2xl font-bold text-green-400" id="timeLeft">10s</p>
                    </div>
                    <svg class="w-8 h-8 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <circle cx="12" cy="12" r="10"></circle>
                        <polyline points="12,6 12,12 16,14"></polyline>
                    </svg>
                </div>
            </div>

            <div class="bg-black/40 backdrop-blur-sm rounded-lg border border-green-800/30 p-6">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm text-gray-400">Clicks</p>
                        <p class="text-2xl font-bold text-green-400" id="clickCount">0</p>
                    </div>
                    <svg class="w-8 h-8 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <circle cx="12" cy="12" r="10"></circle>
                        <path d="m9 12 2 2 4-4"></path>
                    </svg>
                </div>
            </div>

            <div class="bg-black/40 backdrop-blur-sm rounded-lg border border-green-800/30 p-6">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm text-gray-400">Best Score</p>
                        <p class="text-2xl font-bold text-green-400" id="bestScore">0.00</p>
                    </div>
                    <svg class="w-8 h-8 text-yellow-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path d="m9 12 2 2 4-4"></path>
                        <path d="M21 12c.552 0 1.005-.449.95-.998a10.951 10.951 0 0 0-2.8-6.023c-.042-.052-.08-.056-.15-.056-.07 0-.108.004-.15.056a10.951 10.951 0 0 0-2.8 6.023c-.055.549.398.998.95.998z"></path>
                    </svg>
                </div>
            </div>
        </div>

        <!-- Main Test Area -->
        <div class="bg-black/40 backdrop-blur-sm rounded-lg border border-green-800/30 p-8 mb-6">
            <div class="text-center">
                <!-- Ready State -->
                <div id="readyState" class="mb-6">
                    <svg class="w-16 h-16 mx-auto text-green-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <polygon points="5,3 19,12 5,21 5,3"></polygon>
                    </svg>
                    <h3 class="text-xl font-semibold text-gray-200 mb-2">Ready to Start?</h3>
                    <p class="text-gray-400">Click the area below to begin the test!</p>
                </div>

                <!-- Active State -->
                <div id="activeState" class="mb-6 hidden">
                    <svg class="w-16 h-16 mx-auto text-yellow-400 mb-4 animate-pulse" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <polygon points="13,2 3,14 12,14 11,22 21,10 12,10 13,2"></polygon>
                    </svg>
                    <h3 class="text-xl font-semibold text-gray-200 mb-2">Keep Clicking!</h3>
                    <p class="text-gray-400">Click as fast as you can!</p>
                </div>

                <!-- Current CPS Display - Above Button -->
                <div id="currentCPS" class="mb-6 hidden">
                    <p class="text-sm text-gray-400">Current CPS</p>
                    <p class="text-3xl font-bold text-green-400" id="currentCPSValue">0.00</p>
                </div>

                <!-- Finished State -->
                <div id="finishedState" class="mb-6 hidden">
                    <div class="mb-4">
                        <p class="text-sm text-gray-400 mb-2">Your CPS Result</p>
                        <p class="text-4xl font-bold text-green-400 mb-2" id="finalCPS">0.00</p>
                        <div id="performanceRating" class="px-4 py-2 rounded-full bg-green-900/30 text-green-400 font-semibold text-sm inline-block">
                            Average
                        </div>
                    </div>
                    <div id="cooldownMessage" class="text-lg text-yellow-400 font-semibold hidden">
                        Wait <span id="cooldownTime">3</span>s...
                    </div>
                    <div id="blinkingMessage" class="text-lg text-green-400 font-semibold animate-pulse hidden">
                        Click to test again!
                    </div>
                </div>

                <!-- Click Button -->
                <div id="clickButtonContainer">
                    <button id="clickButton"></button>
                </div>

                <!-- Reset Button -->
                <button id="resetButton" class="mt-6 px-6 py-3 bg-gray-700 text-white rounded-lg hover:bg-gray-600 transition-colors flex items-center mx-auto border border-gray-600">
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <polyline points="1,4 1,10 7,10"></polyline>
                        <path d="M3.51 15a9 9 0 1 0 2.13-9.36L1 10"></path>
                    </svg>
                    Reset Test
                </button>
            </div>
        </div>

        <!-- Results -->
        <div id="resultsSection" class="bg-black/40 backdrop-blur-sm rounded-lg border border-green-800/30 p-6 mb-6 hidden">
            <h2 class="text-2xl font-bold text-gray-200 mb-6 text-center">Test Results</h2>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div class="space-y-4">
                    <div class="flex justify-between items-center py-2 border-b border-gray-700">
                        <span class="text-gray-400">Total Clicks:</span>
                        <span class="font-semibold text-lg text-green-400" id="totalClicks">0</span>
                    </div>
                    <div class="flex justify-between items-center py-2 border-b border-gray-700">
                        <span class="text-gray-400">Test Duration:</span>
                        <span class="font-semibold text-lg text-green-400" id="testDuration">10s</span>
                    </div>
                    <div class="flex justify-between items-center py-2 border-b border-gray-700">
                        <span class="text-gray-400">Your CPS:</span>
                        <span class="font-semibold text-lg text-green-400" id="yourCPS">0.00</span>
                    </div>
                    <div class="flex justify-between items-center py-2 border-b border-gray-700">
                        <span class="text-gray-400">Best Score:</span>
                        <span class="font-semibold text-lg text-green-400" id="bestScoreResult">0.00</span>
                    </div>
                </div>

                <div class="flex flex-col items-center justify-center">
                    <div id="performanceRatingResult" class="px-6 py-3 rounded-full bg-green-900/30 text-green-400 font-bold text-lg mb-4 border border-green-500/20">
                        Average
                    </div>
                    <div class="text-center">
                        <p class="text-sm text-gray-400 mb-2">Performance Rating</p>
                        <div class="w-full bg-gray-700 rounded-full h-2">
                            <div id="performanceBar" class="bg-gradient-to-r from-green-500 to-green-400 h-2 rounded-full transition-all duration-500" style="width: 0%"></div>
                        </div>
                        <p class="text-xs text-gray-500 mt-1">
                            <span id="performanceText">0.00</span> / 15.0 CPS
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Footer -->
    <div class="fixed bottom-0 left-0 right-0 bg-black/80 backdrop-blur-sm border-t border-green-800/30 p-4">
        <div class="text-center">
            <p class="text-sm text-gray-400">
                Copyright © 2025 - All rights reserved. Copyrighted by <span class="text-green-400 font-semibold">mayankonweb</span>
            </p>
        </div>
    </div>

    <script>
        // CPS Test JavaScript
        class CPSTest {
            constructor() {
                this.isActive = false;
                this.timeLeft = 10;
                this.selectedTime = 10;
                this.clickCount = 0;
                this.cps = 0;
                this.bestScore = this.loadBestScore();
                this.isFinished = false;
                this.showResults = false;
                this.cooldownTime = 0;
                this.showBlinkingMessage = false;
                this.intervalRef = null;
                this.cooldownRef = null;
                this.clickHistory = [];

                this.initializeEventListeners();
                this.updateDisplay();
            }

            initializeEventListeners() {
                // Time selection buttons
                document.querySelectorAll('.time-btn').forEach(btn => {
                    btn.addEventListener('click', (e) => {
                        this.changeTime(parseInt(e.target.dataset.time));
                    });
                });

                // Click button
                document.getElementById('clickButton').addEventListener('click', () => {
                    this.handleClick();
                });

                // Reset button
                document.getElementById('resetButton').addEventListener('click', () => {
                    this.resetTest();
                });
            }

            loadBestScore() {
                const saved = localStorage.getItem('bestCPS');
                return saved ? parseFloat(saved) : 0;
            }

            saveBestScore() {
                localStorage.setItem('bestCPS', this.bestScore.toString());
            }

            playStartSound() {
                try {
                    const audioContext = new (window.AudioContext || window.webkitAudioContext)();
                    const oscillator = audioContext.createOscillator();
                    const gainNode = audioContext.createGain();

                    oscillator.connect(gainNode);
                    gainNode.connect(audioContext.destination);

                    oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
                    oscillator.frequency.exponentialRampToValueAtTime(400, audioContext.currentTime + 0.1);

                    gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
                    gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.1);

                    oscillator.start(audioContext.currentTime);
                    oscillator.stop(audioContext.currentTime + 0.1);
                } catch (error) {
                    console.log('Audio not supported');
                }
            }

            startTimer() {
                this.intervalRef = setInterval(() => {
                    this.timeLeft--;
                    this.updateDisplay();

                    if (this.timeLeft <= 0) {
                        this.finishTest();
                    }
                }, 1000);
            }

            startCooldown() {
                this.cooldownTime = 3;
                this.showBlinkingMessage = false;
                this.updateDisplay();

                this.cooldownRef = setInterval(() => {
                    this.cooldownTime--;
                    this.updateDisplay();

                    if (this.cooldownTime <= 0) {
                        this.showBlinkingMessage = true;
                        clearInterval(this.cooldownRef);
                        this.updateDisplay();
                    }
                }, 1000);
            }

            handleClick() {
                if (this.isFinished && this.cooldownTime > 0) {
                    return; // Button is disabled during cooldown
                }

                if (this.isFinished && this.cooldownTime === 0) {
                    this.resetTest();
                    return;
                }

                if (!this.isActive && this.timeLeft === this.selectedTime) {
                    // Start the test
                    this.playStartSound();
                    this.isActive = true;
                    this.clickCount = 1;
                    this.clickHistory = [Date.now()];
                    this.isFinished = false;
                    this.showResults = false;
                    this.showBlinkingMessage = false;
                    this.cooldownTime = 0;
                    this.startTimer();
                } else if (this.isActive) {
                    // Continue clicking
                    this.clickCount++;
                    this.clickHistory.push(Date.now());
                }

                this.updateDisplay();
            }

            finishTest() {
                this.isActive = false;
                this.isFinished = true;
                this.showResults = true;

                clearInterval(this.intervalRef);

                // Calculate CPS
                this.cps = this.clickCount / this.selectedTime;

                // Update best score
                if (this.cps > this.bestScore) {
                    this.bestScore = this.cps;
                    this.saveBestScore();
                }

                // Start cooldown
                this.startCooldown();

                this.updateDisplay();
            }

            resetTest() {
                this.isActive = false;
                this.timeLeft = this.selectedTime;
                this.clickCount = 0;
                this.cps = 0;
                this.isFinished = false;
                this.showResults = false;
                this.cooldownTime = 0;
                this.showBlinkingMessage = false;
                this.clickHistory = [];

                clearInterval(this.intervalRef);
                clearInterval(this.cooldownRef);

                this.updateDisplay();
            }

            changeTime(time) {
                this.selectedTime = time;
                this.resetTest();

                // Update time button styles
                document.querySelectorAll('.time-btn').forEach(btn => {
                    btn.classList.remove('active');
                    btn.className = 'time-btn p-3 rounded-lg border-2 transition-all border-gray-600 hover:border-gray-500 text-gray-300 hover:bg-gray-800/50';
                });

                document.querySelector(`[data-time="${time}"]`).classList.add('active');
                document.querySelector(`[data-time="${time}"]`).className = 'time-btn p-3 rounded-lg border-2 transition-all border-green-500 bg-green-500/20 text-green-300 active';
            }

            getPerformanceRating(cpsValue) {
                if (cpsValue >= 12) return { text: 'Legendary', class: 'rating-legendary' };
                if (cpsValue >= 10) return { text: 'Excellent', class: 'rating-excellent' };
                if (cpsValue >= 8) return { text: 'Very Good', class: 'rating-very-good' };
                if (cpsValue >= 6) return { text: 'Good', class: 'rating-good' };
                if (cpsValue >= 4) return { text: 'Average', class: 'rating-average' };
                return { text: 'Below Average', class: 'rating-below-average' };
            }

            updateDisplay() {
                // Update time left
                document.getElementById('timeLeft').textContent = `${this.timeLeft}s`;

                // Update click count
                document.getElementById('clickCount').textContent = this.clickCount;

                // Update best score
                document.getElementById('bestScore').textContent = this.bestScore.toFixed(2);

                // Update states
                document.getElementById('readyState').classList.toggle('hidden', this.isActive || this.isFinished);
                document.getElementById('activeState').classList.toggle('hidden', !this.isActive);
                document.getElementById('finishedState').classList.toggle('hidden', !this.isFinished);
                document.getElementById('currentCPS').classList.toggle('hidden', !this.isActive);
                document.getElementById('resultsSection').classList.toggle('hidden', !this.showResults);

                // Update current CPS during test
                if (this.isActive) {
                    const currentCPS = this.clickCount / (this.selectedTime - this.timeLeft) || 0;
                    document.getElementById('currentCPSValue').textContent = currentCPS.toFixed(2);
                }

                // Update finished state
                if (this.isFinished) {
                    document.getElementById('finalCPS').textContent = this.cps.toFixed(2);

                    const performance = this.getPerformanceRating(this.cps);
                    const ratingElement = document.getElementById('performanceRating');
                    ratingElement.textContent = performance.text;
                    ratingElement.className = `px-4 py-2 rounded-full font-semibold text-sm inline-block ${performance.class}`;

                    // Update cooldown message
                    document.getElementById('cooldownMessage').classList.toggle('hidden', this.cooldownTime <= 0);
                    document.getElementById('cooldownTime').textContent = this.cooldownTime;

                    // Update blinking message
                    document.getElementById('blinkingMessage').classList.toggle('hidden', !this.showBlinkingMessage);
                }

                // Update click button
                const clickButton = document.getElementById('clickButton');
                clickButton.disabled = this.isFinished && this.cooldownTime > 0;

                let buttonText = 'START TEST';
                let buttonClass = 'rounded-xl text-white font-bold text-2xl transition-all transform border-2 border-green-500/50 hover:shadow-xl hover:shadow-green-500/30';

                if (this.isFinished && this.cooldownTime > 0) {
                    buttonText = `WAIT ${this.cooldownTime}S`;
                    buttonClass += ' bg-gray-600 cursor-not-allowed opacity-50';
                } else if (this.isActive) {
                    buttonText = 'CLICK!';
                    buttonClass += ' bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 active:scale-95 shadow-lg shadow-green-500/20';
                } else if (this.isFinished) {
                    buttonText = 'CLICK TO RESTART';
                    buttonClass += ' bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 active:scale-95 shadow-lg shadow-blue-500/20';
                } else {
                    buttonClass += ' bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 active:scale-95 shadow-lg shadow-green-500/20';
                }

                clickButton.textContent = buttonText;
                clickButton.className = buttonClass;

                // Update results section
                if (this.showResults) {
                    document.getElementById('totalClicks').textContent = this.clickCount;
                    document.getElementById('testDuration').textContent = `${this.selectedTime}s`;
                    document.getElementById('yourCPS').textContent = this.cps.toFixed(2);
                    document.getElementById('bestScoreResult').textContent = this.bestScore.toFixed(2);

                    const performanceResult = this.getPerformanceRating(this.cps);
                    const ratingResultElement = document.getElementById('performanceRatingResult');
                    ratingResultElement.textContent = performanceResult.text;
                    ratingResultElement.className = `px-6 py-3 rounded-full font-bold text-lg mb-4 border border-green-500/20 ${performanceResult.class}`;

                    // Update performance bar
                    const percentage = Math.min((this.cps / 15) * 100, 100);
                    document.getElementById('performanceBar').style.width = `${percentage}%`;
                    document.getElementById('performanceText').textContent = this.cps.toFixed(2);
                }
            }
        }

        // Initialize the CPS Test when the page loads
        document.addEventListener('DOMContentLoaded', () => {
            new CPSTest();
        });
    </script>
</body>
</html>
